#!/usr/bin/python
# Edited 2016-02-05 
# Sudarshan Ghonge <sudu.ghonge@gmail.com>

import os
import sys
import shutil
import re
import optparse
import os.path
import re

from numpy import sqrt, pi, log
sys.path.append("/home/sudarshan.ghonge/bcv_pipeline/bcv")
#from numpy import matrix

import git_version


##############################FUNCTIONS##############################
def parse_commandline():
    	"""
    	Parse the options given on the command-line.
    	"""
    	parser = optparse.OptionParser(usage = __doc__,version=git_version.verbose_msg)

    	parser.add_option("-O", "--Omicron_location", default=None,
                      help="Location of trigger folder if you are not using the folder specified in --help.")
	parser.add_option("-k", "--KW_tag", default=None,
                      help="Tag for KW compatibility")
	parser.add_option("-o", "--omicron_tag", default=None,
                      help="Custom omicron tag to channel name")
    	parser.add_option("-c", "--channel_name", default=None,
                      help="Channel name you want Omicron triggers from. See --help for the naming format. Required.")
    	parser.add_option("-m", "--min_thresh", type="float", default=0,
                      help="Minimum SNR threshold for Omicron triggers. (Default: 0)")
    	parser.add_option("-s", "--separator", default="_",
                      help="IFO/channel string separator (default '_'.")
	parser.add_option("-I", "--ch_ifo", default="L1",
                      help="IFO entry.")
	parser.add_option("-S", "--segFile", default=None,
                      help="User's segment file.")
        parser.add_option("-L", "--min-freq", type="float", default=0,
                          help="Minumum frequency of trigger")
        parser.add_option("-H", "--max-freq", type="float", default=8192,
                          help="Maximum frequency of trigger")

	opts, args = parser.parse_args()

	return opts

########################MAIN####################################

opts = parse_commandline()

Omicron_loc = opts.Omicron_location
ifo = opts.ch_ifo
tag = opts.KW_tag

channel_o = opts.channel_name + '_' + opts.omicron_tag

channel = opts.channel_name


segments = []
seg = open(opts.segFile, 'r')

#time_prefix = []
#first loop to find appropriate time directories
#time_prefix = os.listdir(Omicron_loc + '/' + channel_o) #get available time directories
#time_prefix = os.listdir(Omicron_loc + channel_o) #get available time directories
# Edited 2016-02-05 Sudarshan Ghonge <sudu.ghonge@gmail.com>: Not needed for using GetOmicronTriggers. 

#z = 0
#j = 0
#loc_flag = 0
# Edited 2016-02-05 Sudarshan Ghonge <sudu.ghonge@gmail.com>: Not needed for using GetOmicronTriggers. 

for line in seg:
        # Break line into start and end time times of segment
        seg_break = line.split(' ')
        startTime = seg_break[0]
        endTime = seg_break[1].split('\n')[0]

	# Remove pre-existing temporary file
	if os.path.isfile('temp_local_data.txt'):
	  os.remove('temp_local_data.txt')
        if (opts.min_freq is None or opts.max_freq is None):
            string = 'omicron-print.exe channel=%s gps-start=%s gps-end=%s print-q=1 snr-min=%f cluster-dt=0.01> temp_local_data.txt '%(ifo + ':' + channel, startTime, endTime, opts.min_thresh)
        else:
            string = 'omicron-print.exe channel=%s gps-start=%s gps-end=%s print-q=1 snr-min=%f freq-min=%f freq-max=%f cluster-dt=0.01> temp_local_data.txt '%(ifo + ':' + channel, startTime, endTime, opts.min_thresh, opts.min_freq, opts.max_freq)


        print 'Executing "%s"'%(string)
	os.system(string)
	printresult = []

	f = open('temp_local_data.txt', 'r')
	
	# Sanity check
	line = f.readline()
	if 'GetOmicronTriggers.sh: Omicron triggers are not available' in line:
		continue	
	i = 0
	# Constant required while calculating the full width at half maximum
	const_fwhm = sqrt(2.0*log(2.0))
	for line in f:
	    if (not line.startswith('#') and line!=''):
		line = line.split()
		Q = float(line[2])
		f0 = float(line[1])
		sd = Q/(f0*pi)
		hwhm = const_fwhm*sd/2.0 # Half width at half maximum.
		trigger_peak = float(line[0])
		trigger_start = trigger_peak - 3*hwhm
		trigger_end = trigger_peak + 3*hwhm
		trigger_snr = float(line[3])
		line1 = '%.4f %.4f %.4f %.4f %.2f'%(trigger_start, trigger_end, trigger_peak, f0, trigger_snr )
		line1 = line1.split()
		printresult.insert(i,line1)
		i+=1
	f.close()

	if os.path.isfile('KWtrigs/' + tag  + '_' + ifo + opts.separator + channel + '.txt'):
		g = open('KWtrigs/' + tag  + '_' + ifo + opts.separator + channel + '.txt', 'a')  #append
	else:	
		g = open('KWtrigs/' + tag  + '_' + ifo + opts.separator + channel + '.txt', 'w')  #create new file is it doesn't exist

	#l = 0

                                 
	for l in range(0, (len(printresult))):
		#os.system('clear')
		print >> sys.stderr, "Writing line...SNR: %s > %s"%(printresult[l][4],opts.min_thresh)
		print >> sys.stderr, "end time: %s"%printresult[l][1]
		g.write('  '.join(printresult[l]) + '\n')
		#l = l + 1
		#print >> sys.stderr, "printresult length: %s"%(len(printresult))
		#print >> sys.stderr, "Counter : %s"%l
	g.close()  